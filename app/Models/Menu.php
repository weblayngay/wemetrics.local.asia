<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

class Menu extends BaseModel
{
    use HasFactory;

    protected $table = MENU_TBL;
    protected $primaryKey = 'menu_id';

    const CREATED_AT = 'menu_created_at';
    const UPDATED_AT = 'menu_created_at';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'menu_name',
        'menugroup_description',
        'menu_url',
        'menu_group',
        'menu_parent',
        'menu_sorted',
        'menu_status',
        'menu_is_delete',
        'menu_type',
        'menu_created_at',
        'menu_updated_at',
        'menu_created_by',
        'menu_updated_by',
        'menu_deleted_by',
    ];

    const ALIAS = [
        'menu_id'                   => 'id',
        'menu_name'                 => 'name',
        'menugroup_description'     => 'description',
        'menu_url'                  => 'url',
        'menu_group'                => 'group',
        'menu_parent'               => 'parent',
        'menu_sorted'               => 'sorted',
        'menu_status'               => 'status',
        'menu_is_delete'            => 'isDelete',
        'menu_type'                 => 'type',
        'menu_created_at'           => 'createdAt',
        'menu_updated_at'           => 'updatedAt',
        'menu_created_by'           => 'createdBy',
        'menu_updated_by'           => 'updatedBy',
        'menu_deleted_by'           => 'deletedBy',

    ];

    /**
     * @return Builder
     */
    public static function parentQuery(): Builder
    {
        return parent::query(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Illuminate\Database\Eloquent\Builder
     */
    static function query($isDeleted = true)
    {
        if($isDeleted == true)
        {
            return parent::query()->notDeleted();
        } else {
            return parent::query();
        }
        
    }

     /**
     * @return hasMany
     */
     public function items()
     {
        return $this->hasMany(self::class, 'menu_parent');
     }

     /**
     * @return hasMany
     */
     public function childItems()
     {
        return $this->hasMany(self::class, 'menu_parent')->with('items');
     }

    /**
     * @param $query
     * @return mixed
     */
    public function scopeIsStatic($query)
    {
        return $query->where('menu_type', 'static');
    }

    /**
     * @param $query
     * @return mixed
     */
    public function scopeIsDynamic($query)
    {
        return $query->where('menu_type', 'dynamic');
    }

    /**
     * @param $query
     * @return mixed
     */
    public function scopeNotDeleted($query)
    {
        return $query->where('menu_is_delete', 'no');
    }

    /**
     * @param $query
     * @return mixed
     */
    public function scopeIsActivated($query)
    {
        return $query->where('menu_status', 'activated');
    }

    /**
     * @param int $menuGroupId
     * @return mixed
     */
    public function findByMenuGroupId(int $menuGroupId)
    {
        return parent::query()->where(['menu_group' => $menuGroupId])->isActivated()->get();
    }

    /**
     * @param string $menuGroupCode
     * @param int $limit
     * @return mixed
     */
    public function findByMenuGroupCode(string $menuGroupCode, int $limit = 10)
    {
        return parent::query()->join(MENU_GROUP_TBL, MENU_GROUP_TBL . '.menugroup_id', MENU_TBL . '.menu_group')
            ->where(['menugroup_code' => $menuGroupCode])->isActivated()->limit($limit)->orderBy('menu_sorted', 'asc')->get();
    }

    /**
     * @return hasOne
     */
    public function group(): HasOne
    {
        return $this->hasOne('App\Models\MenuGroup', 'menugroup_id', 'menu_group');
    }

    /**
     * @return BelongsTo
     */
    public function groups(): BelongsTo
    {
        return $this->belongsTo('App\Models\MenuGroup', 'menugroup_id', 'menu_group');
    }
}
